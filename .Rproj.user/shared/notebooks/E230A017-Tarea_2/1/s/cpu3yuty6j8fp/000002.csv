"0","# Now, let's fit the model. Be sure to specify the parameter family=binomial in the glm() function."
"0","model <- glm(Seguro_salud ~.,family=binomial(link='logit'),data=df)"
"0","# By using function summary() we obtain the results of our model:"
"0","summary(model)"
"1","
Call:
"
"1",""
"1","glm(formula = Seguro_salud ~ ., family = binomial(link = ""logit""), 
    data = df)"
"1",""
"1","

"
"1","Deviance Residuals: 
"
"1","    Min  "
"1","     1Q  "
"1"," Median  "
"1","     3Q  "
"1","    Max  "
"1","
"
"1","-1.4695  "
"1","-0.4499  "
"1","-0.3045  "
"1","-0.2197  "
"1"," 2.9585  "
"1","
"
"1","
Coefficients:
"
"1","           "
"1","   Estimate"
"1"," Std. Error"
"1"," z value"
"1"," Pr(>|z|)"
"1","    "
"1","
(Intercept)"
"1"," -6.0572303"
"1","  0.2675471"
"1"," -22.640"
"1","  < 2e-16"
"1"," ***"
"1","
TAMAMU     "
"1"," -0.1381639"
"1","  0.0174673"
"1","  -7.910"
"1"," 2.58e-15"
"1"," ***"
"1","
NMIEMB     "
"1"," -0.0747429"
"1","  0.0432597"
"1","  -1.728"
"1","   0.0840"
"1"," .  "
"1","
NMIEM2     "
"1","  0.2634863"
"1","  0.0490330"
"1","   5.374"
"1"," 7.72e-08"
"1"," ***"
"1","
NUMOCUP    "
"1","  0.0570971"
"1","  0.0542485"
"1","   1.053"
"1","   0.2926"
"1","    "
"1","
TIPHOGAR3  "
"1"," -0.0215969"
"1","  0.0139735"
"1","  -1.546"
"1","   0.1222"
"1","    "
"1","
EDADSP     "
"1","  0.0189179"
"1","  0.0030968"
"1","   6.109"
"1"," 1.00e-09"
"1"," ***"
"1","
SEXOSP1    "
"1"," -0.0730851"
"1","  0.0564003"
"1","  -1.296"
"1","   0.1950"
"1","    "
"1","
ESTUDREDSP "
"1","  0.3278182"
"1","  0.0303024"
"1","  10.818"
"1","  < 2e-16"
"1"," ***"
"1","
OCUSP1     "
"1"," -0.0476649"
"1","  0.1018306"
"1","  -0.468"
"1","   0.6397"
"1","    "
"1","
INTERINPSP "
"1","  0.1596892"
"1","  0.0267546"
"1","   5.969"
"1"," 2.39e-09"
"1"," ***"
"1","
REGTEN     "
"1"," -0.0532335"
"1","  0.0281514"
"1","  -1.891"
"1","   0.0586"
"1"," .  "
"1","
SUPERF     "
"1","  0.0040972"
"1","  0.0004837"
"1","   8.470"
"1","  < 2e-16"
"1"," ***"
"1","
INTERIN    "
"1","  0.2631315"
"1","  0.0252377"
"1","  10.426"
"1","  < 2e-16"
"1"," ***"
"1","
"
"1","---
Signif. codes:  "
"1",""
"1","0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"
"1","
"
"1","
(Dispersion parameter for "
"1",""
"1","binomial"
"1",""
"1"," family taken to be "
"1",""
"1","1"
"1",""
"1",")

"
"1",""
"1","    Null deviance: 13058  on 21394  degrees of freedom
"
"1",""
"1","Residual deviance: 11302  on 21381  degrees of freedom
"
"1","AIC: "
"1",""
"1","11330"
"1",""
"1","

"
"1",""
"1","Number of Fisher Scoring iterations: "
"1",""
"1","6"
"1",""
"1","
"
"1","
"
"0","coef <- as.data.frame(exp(coef(model)))"
"0",""
"0","# Now we can run the anova() function on the model to analyze the table of deviance"
"0","# anova(model, test=""Chisq"")"
"0",""
"0","# Analyzing the table we can see the drop in deviance when adding each variable one at a time."
"0","# Again, adding Pclass, Sex and Age significantly reduces the residual deviance. "
"0","# The other variables seem to improve the model less even though SibSp has a low p-value."
"0","# A large p-value here indicates that the model without the variable explains more or less the same amount of variation."
"0",""
"0","# While no exact equivalent to the R2 of linear regression exists, the McFadden R2 index can be used to assess the model fit."
"0","#install.packages(""pscl"")"
"0","library(pscl)"
"0","pR2(model)"
"1","          llh "
"1","      llhNull "
"1","           G2 "
"1","     McFadden "
"1","         r2ML "
"1","
"
"1","-5.650980e+03 "
"1","-6.529195e+03 "
"1"," 1.756430e+03 "
"1"," 1.345058e-01 "
"1"," 7.881587e-02 "
"1","
"
"1","         r2CU "
"1","
"
"1"," 1.725247e-01 "
"1","
"
"0","# In the steps above, we briefly evaluated the fitting of the model, "
"0","# now we would like to see how the model is doing when predicting y on a new set of data. "
"0","# By setting the parameter type='response', R will output probabilities in the form of P(y=1|X). "
"0","# Our decision boundary will be 0.5. If P(y=1|X) > 0.5 then y = 1 otherwise y=0. "
"0","# Note that for some applications different thresholds could be a better option."
"0","fitted.results <- predict(model,newdata=test[,-1],type='response')"
"0","fitted.results <- ifelse(fitted.results > 0.54100000,1,0)# Optimal cut-off 0.54100000"
"0",""
"0",""
